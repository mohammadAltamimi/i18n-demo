{"version":3,"sources":["components/slider/Slider.js","components/slider/SliderParent.js","components/navbar/NavBar.js","App.js","serviceWorker.js","i18n.js","index.js"],"names":["Slider","props","checkButtons","offsetWidthValue","scrollWidthValue","setState","prevDisable","refs","scrollLeft","nextDisable","state","offsetWidth","scrollWidth","this","lang","console","log","className","ref","el","children","disabled","onClick","React","Component","SliderParent","useTranslation","t","i18n","language","returnObjects","map","value","key","NavBar","selectLang","selectedLanguage","id","type","htmlFor","onChange","e","target","changeLanguage","App","Boolean","window","location","hostname","match","use","Backend","LanguageDetector","initReactI18next","init","fallbackLng","debug","whitelist","interpolation","escapeValue","ReactDOM","render","fallback","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.108b6541.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./slider.css\";\n\n\nclass Slider extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tprevDisable: true,\n\t\t\tnextDisable: this.refs && this.refs.offsetWidth >= this.refs.scrollWidth ? true : false\n\t\t};\n\t}\n\n componentDidMount() {\n  this.checkButtons(this.refs.offsetWidth, this.refs.scrollWidth);\n }\n\tcheckButtons = (offsetWidthValue, scrollWidthValue) => {\n\t\tthis.setState({\n\t\t\tprevDisable: this.refs.scrollLeft <= 0 ? true : false,\n\t\t\tnextDisable: this.refs.scrollLeft + offsetWidthValue >= scrollWidthValue ? true : false\n\t\t});\n\t};\n\n\trender() {\n\t\tconst {lang}=this.props\n\t\tconsole.log('slider',this.props.lang)\n\t\tconst offsetWidthValue = this.refs.offsetWidth,\n\t\t\tscrollWidthValue = this.refs.scrollWidth;\n\t\treturn (\n\t\t\t<div\n\t\t\t\tclassName='slider-container'\n\t\t\t\tref={el => {\n\t\t\t\t\tthis.refs = el;\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<div className='slider-wrapper'>{this.props.children}</div>\n\t\t\t\t<div\n\t\t\t\t\tclassName={`btn prev ${this.state.prevDisable ? 'disable' : ''}`}\n\t\t\t\t\tdisabled={this.state.prevDisable}\n\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\tthis.refs.scrollLeft -= offsetWidthValue / 2;\n\t\t\t\t\t\tthis.checkButtons(offsetWidthValue, scrollWidthValue);\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t{lang==='en'?'<':'>'}\n\t\t\t\t</div>\n\t\t\t\t<div\n\t\t\t\t\tclassName={`btn next ${this.state.nextDisable ? 'disable' : ''}`}\n\t\t\t\t\tdisabled={this.state.nextDisable}\n\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\tthis.refs.scrollLeft += offsetWidthValue / 2;\n\t\t\t\t\t\tthis.checkButtons(offsetWidthValue, scrollWidthValue);\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t{lang==='en'?'>':'<'}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default (Slider);","import React from \"react\";\nimport Slider from \"./Slider\";\nimport \"./slider.css\";\nimport { useTranslation } from \"react-i18next\";\nfunction SliderParent (){\n    const { t, i18n } = useTranslation();\n    // console.log(' slider',i18n.language  )\n    // console.log('data',(t('data',{ returnObjects: true })))\n        // let data = [\n        //           'Apple',\n        //           'Ball',\n        //           'Cat',\n        //           'Dog',\n        //           'Elephant',\n        //           'Fruits',\n        //           'Gorilla',\n        //           'Horse',\n        //           'Ink',\n        //           'Jug',\n        //           'Kite',\n        //           'Lemon',\n        //           'Orange',\n        //           'Paddy',\n        //           'Queen',\n        //           'Rose',\n        //           'Street',\n        //           'Tuesday',\n        //           'Umbrella',\n        //           'Vanilla',\n        //           'Wax',\n        //           'Xerox',\n        //           'Yarn',\n        //           'Zebra'\n        //       ];\n              return (\n                  <div className={`parent ${i18n.language}`}  >\n                      <Slider lang={i18n.language}>\n                          {(t('data',{ returnObjects: true })).map(value => {\n                              return (\n                                  <div key={value} className='child'  >\n                                      {value}\n                                  </div>\n                              );\n                          })}\n                      </Slider>\n\n                      {/* <h1>ddddd {t('data',{ returnObjects: true })}</h1> */}\n                  </div>\n              );\n          \n}\n\n\nexport default (SliderParent);\n","import React from \"react\";\nimport \"./navBar.css\";\n\nimport { useTranslation } from \"react-i18next\";\nfunction NavBar({ selectLang, selectedLanguage }) {\n  const { t, i18n } = useTranslation();\n\n const selectedLanguages = (lang) => {\n    i18n.changeLanguage(lang);\n    // console.log('lang',i18n.language)\n  };\n  return (\n    <div className={`navbar  ${i18n.language}`}>\n      <div className='container'>\n        <div className='grid-container'>\n          <div className='logo'>\n            <h2>\n            {t('navbar.logo')}\n              {/* <FormattedMessage id='logo' /> */}\n            </h2>\n          </div>\n\n          <input id='label-nav' type='checkbox' />\n          <label htmlFor='label-nav'> </label>\n\n          <ul className='list'>\n            <li className='list-item'> {t('navbar.Home')}</li>\n            <li className='list-item'>\n            {t('navbar.Profile')}</li>\n            <li className='list-item'>{t('navbar.About')}</li>\n            <li className='list-item'>{t('navbar.Content')}</li>\n            <li className='list-item'>{t('navbar.Try')}</li>\n            <select\n              onChange={(e) => selectedLanguages(e.target.value)}\n              value={i18n.language}\n            >\n              <option value='ar'>العربية</option>\n              <option value='en'>English</option>\n            </select>\n          </ul>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n\nexport default NavBar;\n","import React from \"react\";\nimport \"./App.css\";\n\nimport SliderParent from \"./components/slider/SliderParent\";\nimport NavBar from \"./components/navbar/NavBar\";\n\nclass App extends React.Component {\n  render() {\n    // const { selectLang } = this.props;\n    // console.log(\"se\n    return (\n      <div>\n        <NavBar/>\n        <br/>\n        <br/>\n        <br/>\n        <SliderParent />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import i18n from \"i18next\";\nimport { initReactI18next } from \"react-i18next\";\n\nimport Backend from \"i18next-http-backend\";\nimport LanguageDetector from \"i18next-browser-languagedetector\";\n// not like to use this?\n// have a look at the Quick start guide\n// for passing in lng and translations on init\nconst languages = [\"en\", \"ar\"];\n\ni18n\n  // load translation using http -> see /public/locales (i.e. https://github.com/i18next/react-i18next/tree/master/example/react/public/locales)\n  // learn more: https://github.com/i18next/i18next-http-backend\n  .use(Backend)\n  // detect user language\n  // learn more: https://github.com/i18next/i18next-browser-languageDetector\n  .use(LanguageDetector)\n  // pass the i18n instance to react-i18next.\n  .use(initReactI18next)\n  // init i18next\n  // for all options read: https://www.i18next.com/overview/configuration-options\n  .init({\n    fallbackLng: \"en\",\n    debug: true,\n    whitelist:languages,\n\n    interpolation: {\n      escapeValue: false, // not needed for react as it escapes by default\n    },\n  });\n\nexport default i18n;\n","import React, { Suspense } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\n\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./i18n\";\nReactDOM.render(\n \n    <Suspense fallback={(<div>Loading</div>)}>\n      <App />\n    </Suspense>,\n\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}